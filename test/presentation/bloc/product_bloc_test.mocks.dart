// Mocks generated by Mockito 5.4.6 from annotations
// in klontong_app/test/presentation/bloc/product_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:klontong_app/domain/entities/product_entity.dart' as _i3;
import 'package:klontong_app/domain/repositories/product_repository.dart'
    as _i2;
import 'package:klontong_app/domain/usecases/product_usecase.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductRepository_0 extends _i1.SmartFake
    implements _i2.ProductRepository {
  _FakeProductRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProductEntity_1 extends _i1.SmartFake implements _i3.ProductEntity {
  _FakeProductEntity_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProductUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductUseCase extends _i1.Mock implements _i4.ProductUseCase {
  MockProductUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ProductRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeProductRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.ProductRepository);

  @override
  _i5.Future<List<_i3.ProductEntity>> getProducts() =>
      (super.noSuchMethod(
            Invocation.method(#getProducts, []),
            returnValue: _i5.Future<List<_i3.ProductEntity>>.value(
              <_i3.ProductEntity>[],
            ),
          )
          as _i5.Future<List<_i3.ProductEntity>>);

  @override
  _i5.Future<_i3.ProductEntity> addProduct(_i3.ProductEntity? product) =>
      (super.noSuchMethod(
            Invocation.method(#addProduct, [product]),
            returnValue: _i5.Future<_i3.ProductEntity>.value(
              _FakeProductEntity_1(
                this,
                Invocation.method(#addProduct, [product]),
              ),
            ),
          )
          as _i5.Future<_i3.ProductEntity>);

  @override
  _i5.Future<void> deleteProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProduct, [id]),
            returnValue: _i5.Future<void>.value(),
            returnValueForMissingStub: _i5.Future<void>.value(),
          )
          as _i5.Future<void>);
}
